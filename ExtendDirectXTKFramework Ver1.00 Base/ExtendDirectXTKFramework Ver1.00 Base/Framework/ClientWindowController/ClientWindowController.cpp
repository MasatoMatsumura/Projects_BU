//===============================================================================================
//	@file		ClientWindowController.cpp
//	@brief		クライアントウィンドウの制御クラス実装コード
//	@author		MasatoMatsumura
//
//	@version	1.00
//	@since		FrameworkVer1.00( 2014/07/10 )
//	@date		2014/07/10
//===============================================================================================
//	@brief		インクルードファイルは以降に記述
//-----------------------------------------------------------------------------------------------
//■ClientWindowControllerの定義読み込み
#include "ClientWindowController.h"
//■DeviceControllerの定義読み込み
#include "../DeviceController/DeviceController.h"

//===============================================================================================
//	@brief		省略する名前空間は以降に記述
//-----------------------------------------------------------------------------------------------
using namespace Framework;



//===============================================================================================
//	@class	Framework::ClientWindowController "ClientWindowController.h"
//	@fn		ClientWindowController::ClientWindowController( )
//	@brief	{	コンストラクタ
//				クライアントウィンドウの制御クラスの構築処理を行う	}
//	@return	{	なし	}
//-----------------------------------------------------------------------------------------------
ClientWindowController::ClientWindowController( )
{
	//===========================================================================================
	//	TODO :	①クラスの構築処理は以降に記述
	//-------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------
	//			①ここまで
	//===========================================================================================
}



//===============================================================================================
//	@class	Framework::ClientWindowController "ClientWindowController.h"
//	@fn		ClientWindowController::~ClientWindowController( )
//	@brief	{	デストラクタ
//				クライアントウィンドウの制御クラスの終了処理を行う	}
//	@return {	なし	}
//-----------------------------------------------------------------------------------------------
ClientWindowController::~ClientWindowController( )
{
	//===========================================================================================
	//	TODO :	①終了処理は以降に記述
	//-------------------------------------------------------------------------------------------

	//-------------------------------------------------------------------------------------------
	//			①ここまで
	//===========================================================================================
}



//===============================================================================================
//	@class	Framework::ClientWindowController "ClientWindowController.h"
//	@fn		ClientWindowController::InitializeWindow( )
//	@Brief	{	イニシャライザ
//				ウィンドウクラスを設定、登録してクライアントウィンドウを作成する	}
//	@return	{	成功を表すS_OK定数を返す
//				または、エラー発生時にエラーを表すE_FAIL定数を返す	}
//-----------------------------------------------------------------------------------------------
int ClientWindowController::InitializeWindow( )
{
	//===========================================================================================
	//	TODO :	①ウィンドウクラスの定義・設定・登録は以降に記述
	//-------------------------------------------------------------------------------------------
	//■ウインドウクラスを定義
	WNDCLASSEX wcex;

	//■ウィンドウクラスの設定
	wcex.cbSize = sizeof( WNDCLASSEX );
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = this->WindowProcedure;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = WINAPIDATA->hInstance;
	wcex.hIcon = LoadIcon( WINAPIDATA->hInstance, (LPCTSTR)NULL );
	wcex.hCursor = LoadCursor( NULL, IDC_ARROW );
	wcex.hbrBackground = (HBRUSH)( COLOR_WINDOW + 1 );
	wcex.lpszMenuName = NULL;
	wcex.lpszClassName = WINAPIDATA->szWindowClass.c_str( );
	wcex.hIconSm = LoadIcon( wcex.hInstance, (LPCTSTR)NULL );

	//■ウィンドウクラスの登録
	//　登録失敗時、エラーを返却
	if( !RegisterClassEx( &wcex ) ) return E_FAIL;
	//-------------------------------------------------------------------------------------------
	//			①ここまで
	//===========================================================================================

	

	//===========================================================================================
	//	TODO :	②ウィンドウの作成処理は以降に記述
	//-------------------------------------------------------------------------------------------
	//■ウィンドウの矩形サイズを定義
	RECT rc = { 0, 0, WINAPIDATA->CLIENT_WIDTH, WINAPIDATA->CLIENT_HEIGHT };
	AdjustWindowRect( &rc, WS_OVERLAPPEDWINDOW, FALSE );
	WINAPIDATA->nWidth = rc.right - rc.left;
	WINAPIDATA->nHeight = rc.bottom - rc.top;

	//■ウィンドウの作成
	WINAPIDATA->hWnd = CreateWindow(
		//・ウィンドウの識別名
		WINAPIDATA->szWindowClass.c_str( ),
		//・ウィンドウのタイトルバーに表示するテキスト
		WINAPIDATA->szTitle.c_str( ),
		//・ウィンドウモード
		//　※最大化ボタン無効とウインドウサイズを変更できないように設定
		WS_OVERLAPPEDWINDOW & ~WS_MAXIMIZEBOX & ~WS_THICKFRAME,
		CW_USEDEFAULT, CW_USEDEFAULT,
		//・ウィンドウサイズ
		WINAPIDATA->nWidth, WINAPIDATA->nHeight,
		NULL, NULL,
		WINAPIDATA->hInstance,
		NULL
	);

	//■ウィンドウが作成できてなければエラーを返す
	if( !WINAPIDATA->hWnd ) return E_FAIL;
	//-------------------------------------------------------------------------------------------
	//			②ここまで
	//===========================================================================================



	//■ウィンドウを表示
	ShowWindow( WINAPIDATA->hWnd, WINAPIDATA->nCmdShow );

	//■成功を返す
	return S_OK;
}

//===============================================================================================
//	@class	Framework::ClientWindowController "ClientWindowController.h"
//	@fn		LRESULT CALLBACK ClientWindowController::WindowProcedure( HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam )
//	@Brief	{	ウィンドウプロシージャ
//				WindowsOSのシステムメッセージ（ WindowsMessage ）から適した処理を行う	}
//	@return	{	LRESULT型
//				通常時は0を返却し、例外時にDefWindowProc( )関数の戻り値を返す	}
//-----------------------------------------------------------------------------------------------
LRESULT CALLBACK ClientWindowController::WindowProcedure( HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam )
{
	//===========================================================================================
	//	TODO :	①WindowsOSからのシステムメッセージに対応した処理は以降に記述
	//-------------------------------------------------------------------------------------------
	switch( message )
	{
		//■キーが押されている
		case WM_KEYDOWN:
			//===================================================================================
			//	TODO :	①-①入力されたキーに対応した処理は以降に記述
			//-----------------------------------------------------------------------------------
			//■エスケープキーが押されている場合
			if( wParam == VK_ESCAPE )
			{
				//■アプリケーションの終了
				PostQuitMessage( 0 );
			}
			//-----------------------------------------------------------------------------------
			//			①-①ここまで
			//===================================================================================
			break;



		//■ウィンドウを閉じるボタンが押された
		case WM_DESTROY:
			//===================================================================================
			//	TODO :	①-②ウィンドウを閉じるボタンが押された場合の処理は以降に記述
			//-----------------------------------------------------------------------------------
			//■アプリケーションの終了
			PostQuitMessage( 0 );
			//-----------------------------------------------------------------------------------
			//			①-②ここまで
			//===================================================================================
			break;



		//■ウィンドウのサイズが変更された
		case WM_SIZE:
			//===================================================================================
			//	TODO :	①-③ウィンドウのサイズが変更された場合の処理は以降に記述
			//-----------------------------------------------------------------------------------
			//■デバイス制御クラスにバックバッファをリサイズさせる
			DEVICECONTROLLER->ResizeBackBuffer( );
			//-----------------------------------------------------------------------------------
			//			①-③ここまで
			//===================================================================================
			break;



		//■例外処理
		default:
			//===================================================================================
			//	TODO :	①-④例外処理は以降に記述
			//-----------------------------------------------------------------------------------
			return DefWindowProc( hWnd, message, wParam, lParam );
			//-----------------------------------------------------------------------------------
			//			①-④ここまで
			//===================================================================================
	}
	//-------------------------------------------------------------------------------------------
	//			①ここまで
	//===========================================================================================



	//■正常処理完了を返す
	return 0;
}